<?xml version="1.0" encoding="utf-8"?>
<PropertyList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!--Nodes-->
    <node id="FlashProgrammerNode">
        <name>Flash Settings</name>
        <children>
            <child>ProgramLoadSettingsGroup</child>
            <child>FlashPageGroup</child>
            <child>CcfgGroup</child>
            <child>ScfgGroup</child>
            <child>DebugAuthenticationGroup</child>
            <child>FlashAlignCombineToggle</child>
            <child>FlashAlignmentSize</child>
            <child>DeviceInfoGroup</child>
            <child>HsmFeatureGroup</child>
            <child>PermissionGroup</child>
        </children>
    </node>
    <!--Groups -->
    <group id="ProgramLoadSettingsGroup">
        <name>Program Load Settings</name>
        <children>
            <child>FlashEraseGroup</child>
            <child>ImageVerificationSetting</child>
            <child>PerformBlankCheck</child>
            <child>SectorSize</child>
            <child>CcfgSize</child>
            <child>CcfgUserRecordSize</child>
            <child>CcfgBase</child>
            <child>CcfgPermissions</child>
            <child>ScfgSize</child>
            <child>ScfgBase</child>
            <child>ScfgPermissions</child>
            <child>OtpSize</child>
            <child>OtpBase</child>
        </children>
    </group>
    <group id="FlashPageGroup">
        <name>Skip Sectors during Program Load</name>
        <children>
            <child>FlashPageToggle</child>
            <child>FlashPageText</child>
            <child>FlashPages</child>
            <child>FlashPagesFilledWith</child>
            <child>FlashPagesFilledWithValue</child>
        </children>
    </group>
    <group id="DebugAuthenticationGroup">
        <name>Debug authentication</name>
        <children>
            <child>DebugPassword</child>
        </children>
    </group>
    <group id="DeviceInfoGroup">
        <name>Device Information</name>
        <children>
            <child>DeviceInfoFlashSize</child>
            <child>DeviceInfoRAMSize</child>
            <child>DeviceInfoRevision</child>
            <child>ReadDeviceInfo</child>
            <child>DeviceInfoRevisionTranslation</child>
            <child>DeviceInfoRAMSizeTranslation</child>
            <child>DeviceInfoFlashSizeTranslation</child>
        </children>
    </group>
    <group id="CcfgGroup">
        <name>Customer Configuration (CCFG)</name>
        <children>
            <child>CcfgOverwriteCrcsToggle</child>
            <child>CcfgCrcFields</child>
            <child>CcfgSkipProgrammingUserRecord</child>
            <child>CcfgVerifyUserRecordCrcToggle</child>
            <child>ccfg.bootCfg.crc32Info</child>
            <child>ccfg.crc32Info</child>
            <child>ccfg.userRecord.crc32Info</child>
            <child>ccfg.debugCfg.crc32Info</child>
            <child>CcfgOverwriteAuthorizationFieldsToggle</child>
            <child>CcfgOverwriteAuthorizationFieldsTypeChoicelist</child>
            <child>CcfgOverwriteAuthorizationFieldsPasswordId</child>
            <child>CcfgOverwriteAuthorizationFieldsPasswordHash</child>
        </children>
    </group>
    <group id="ScfgGroup">
        <name>Security Configuration (SCFG)</name>
        <children>
            <child>ScfgOverwriteCrcsToggle</child>
            <child>ScfgCrcFields</child>
            <child>scfg.crc32Info</child>
            <child>scfg2.crc32Info</child>
        </children>
    </group>
    <group id="HsmFeatureGroup">
        <name>HSM Features</name>
        <children>
            <child>HsmPageText</child>
            <child>HsmInfoGroup</child>
            <child>HsmImageGroup</child>
            <child>HsmUpdStateGroup</child>
        </children>
    </group>
    <group id="HsmInfoGroup">
        <name>HSM Info</name>
        <children>
            <child>ReadHsmSysInfo</child>
            <child>HsmSysInfo</child>
        </children>
    </group>
    <group id="HsmImageGroup">
        <name>HSM Image</name>
        <children>
            <child>HsmProvisionText</child>
            <child>HsmImagePath</child>
            <child>ProgramHsmImage</child>
        </children>
    </group>
    <group id="HsmUpdStateGroup">
        <name>HSM Update status</name>
        <children>
            <child>ReadHsmUpdateStatus</child>
            <child>HsmUpdateStatus</child>
        </children>
    </group>
    <group id="FlashEraseGroup">
        <name>Flash Erase options</name>
        <children>
            <child>NoFlashErase</child>
            <child>RetainMainSectors</child>
            <child>RetainCcfgScfg</child>
        </children>
    </group>
    <group id="PermissionGroup">
        <name>Permission check</name>
        <children>
            <child>PermissionsSettingText</child>
            <child>PermissionsSetting</child>
        </children>
    </group>
    <!--Categories -->
    <categories>
        <category>Program Load</category>
        <category>Flash Erase</category>
        <category>CCFG</category>
        <category>Manual Erase</category>
        <category>Debug Authentication</category>
        <category>Flash Page</category>
        <category>Download</category>
        <category>Primary BLE Address</category>
        <category>Secondary BLE Address</category>
        <category>Primary IEEE Address</category>
        <category>Secondary IEEE Address</category>
        <category>Device Info</category>
        <category>HSM Info</category>
        <category>HSM Image</category>
        <category>HSM Update status</category>
        <category>Permission check</category>
    </categories>
    <!--Property Definitions -->
    <property id="NoFlashErase">
        <target>generic</target>
        <name>Do not erase before program load</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Flash Erase</category>
        </categories>
    </property>
    <property id="RetainMainSectors">
        <target>generic</target>
        <name>Retain MAIN sectors specified in existing CCFG</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <enableIf>
            <property id="NoFlashErase">0</property>
        </enableIf>
        <categories>
            <category>Flash Erase</category>
        </categories>
    </property>
    <property id="RetainCcfgScfg">
        <target>generic</target>
        <name>Retain CCFG and SCFG sectors</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <enableIf>
            <property id="NoFlashErase">0</property>
        </enableIf>
        <categories>
            <category>Flash Erase</category>
        </categories>
    </property>
    <property id="ImageVerificationSettingText">
        <target>generic</target>
        <name>Note: If the "Verify Only" option is selected, image data will be verified via device management commands (contents on the device are never read back).
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="ImageVerificationSetting">
        <target>generic</target>
        <name>Verify Only</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="PerformBlankCheck">
        <target>generic</target>
        <name>Perform Blank Check</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("BlankCheck")</action>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="FlashPageText">
        <target>generic</target>
        <name>Note: This option affects erase, program and verification.
The specified sectors are not programmed. The sectors can be given as a range and/or single sectors.
Example: "0-5,8" Skip erase/program/verify of sectors 0, 1, 2, 3, 4, 5, 8.
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPageToggle">
        <target>generic</target>
        <name>Skip specified sectors during program load</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPages">
        <target>generic</target>
        <name>Sector(s): </name>
        <valueType>String</valueType>
        <defaultValue>0-5,8</defaultValue>
        <enableIf>
            <property id="FlashPageToggle">1</property>
        </enableIf>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPagesFilledWith">
        <target>generic</target>
        <name>Skip sectors filled with specified value</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPagesFilledWithValue">
        <target>generic</target>
        <name>Exlude sectors in image filled with:</name>
        <valueType>String</valueType>
        <defaultValue>0x</defaultValue>
        <enableIf>
            <property id="FlashPagesFilledWith">1</property>
        </enableIf>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="DebugPassword">
        <target>generic</target> <!-- ISA name for Cortex-M3/4 -->
        <name>Debug Password</name>
        <valueType>String</valueType>
        <defaultValue>Open Sesame!</defaultValue>
        <categories>
            <category>Debug Authentication</category>
        </categories>
    </property>
    <property id="FlashAlignCombineToggle">
        <target>generic</target>
        <name>Align program with sectors</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <hidden />
    </property>
    <property id="FlashAlignmentSize">
        <!-- When set, this option combines all sections that is within the given range,
             resulting in bigger programming chunks and improved speed. Holes are
             programmed with FF data -->
        <target>generic</target>
        <name>Alignment Size: 0x</name>
        <valueType>String</valueType>
        <defaultValue>800</defaultValue> <!-- HEX value -->
        <hidden />
    </property>
    <property id="DeviceInfoFlashSize">
        <target>generic</target>
        <name>Flash Size</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="DeviceInfoRAMSize">
        <target>generic</target>
        <name>RAM Size</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="DeviceInfoRevision">
        <target>generic</target>
        <name>Revision</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="ReadDeviceInfo">
        <target>generic</target>
        <name>Read Device Info</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ReadDeviceInfo")</action>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="HsmPageText">
        <target>generic</target>
        <name>The HSM features can only be used with silicon revision E or higher.
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>HSM Features</category>
        </categories>
    </property>
    <property id="HsmSysInfo">
        <target>generic</target>
        <name>HSM Information</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>HSM Info</category>
        </categories>
    </property>
    <property id="ReadHsmSysInfo">
        <target>generic</target>
        <name>Read HSM System Information</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ReadHsmSysInfo")</action>
        <categories>
            <category>HSM info</category>
        </categories>
    </property>
    <property id="HsmProvisionText">
        <target>generic</target>
        <name>The HSM Image should be given as an encrypted binary file(.bin). The Image will be decrypted and verified by TI owned keys. Optionally, the customer can sign the encrypted binary which would then be verified using the public key hash in SCFG (Secure Configuration).
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>HSM Image</category>
        </categories>
    </property>
    <property id="HsmImagePath">
        <target>generic</target>
        <name>Enter path to the image</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <categories>
            <category>HSM Image</category>
        </categories>
    </property>
    <property id="ProgramHsmImage">
        <target>generic</target>
        <name>Program HSM Image</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ProgramHsmImage")</action>
        <categories>
            <category>HSM Image</category>
        </categories>
    </property>
    <property id="HsmUpdateStatus">
        <target>generic</target>
        <name>HSM FW update status</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>HSM Update status</category>
        </categories>
    </property>
    <property id="ReadHsmUpdateStatus">
        <target>generic</target>
        <name>Read HSM FW Update Status</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ReadHsmUpdateStatus")</action>
        <categories>
            <category>HSM Update status</category>
        </categories>
    </property>
    <property id="DeviceInfoRevisionTranslation">
        <target>generic</target>
        <name>Revision Translation</name>
        <valueType>String</valueType>
        <!-- Revision translation
             The list describes how the revision information in DEVICEID_VERSION and DEVICEID_DEVICE (DEVICEID[31:12]) can be translated to a numeric representation (e.g. 1.0) and a letter representation (e.g. A)
             The format of the list is as below:
             "<DEVICEID[31:12]>:<numeric representation>:<letter representation>:<DEVICEID[31:12]>:<numeric representation>:<letter representation>:..."
        -->
        <defaultValue>0x0BB98:1.0:NA:0x1BB98:1.01:A:0x2BB98:1.1:B:0x3BB98:1.11:C:0x4BB98:1.2:D:0x5BB98:2.0:E</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="DeviceInfoRAMSizeTranslation">
        <target>generic</target>
        <name>RAM Size Translation</name>
        <valueType>String</valueType>
        <!-- Format: <DEVICEID_DEVICE>:<PARTID_PART>:<PARTID_VARIANT>:<RAM size in bytes>:...
             All elements must be in hex, except if a wildcard character '*' is specifed instead.
             If for example all variants of a device has the same size, the wildcard character can be used.
             For example "0xBB98:0x3548:*:0x20000". This means that all variants with DEVICEID_DEVICE=0xBB98 and PARTID_PART=0x3548 has a RAM size of 128kB
             Another example is "0xBB98:*:*:0x20000". This means that all devices with DEVICEID_DEVICE=0xBB98 has a RAM size of 128kB "-->
        <defaultValue>0xBB98:*:*:0x20000:0xBB98:0x6301:*:0x28800:0xBB98:0xAF23:0xE8:0x28800:0xBB98:0xAF23:0xDE:0x28800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="DeviceInfoFlashSizeTranslation">
        <target>generic</target>
        <name>Flash Size Translation</name>
        <valueType>String</valueType>
        <!-- Format: <DEVICEID_DEVICE>:<PARTID_PART>:<PARTID_VARIANT>:<Flash size in bytes>;...
             All elements must be in hex, except if a wildcard character '*' is specifed instead.
             If for example all variants of a device has the same size, the wildcard character can be used.
             For example "0xBB98:0x3548:*:0xC0000". This means that all variants with DEVICEID_DEVICE=0xBB98 and PARTID_PART=0x3548 has a flash size of 768kB
             Another example is "0xBB98:*:*:0xC0000". This means that all devices with DEVICEID_DEVICE=0xBB98 has a flash size of 768kB "-->
        <defaultValue>0xBB98:*:*:0x100000:0xBB98:0x3548:*:0xC0000:0xBB98:0xAF23:0x87:0xC0000:0xBB98:0xAF23:0xAB:0xC0000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgOverwriteCrcsToggle">
        <target>generic</target>
        <name>Overwrite CRC fields in CCFG. The CRC values will be based on the provided image.</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <description>Specify which CRC fields should be overwritten below. This setting is automatically enabled if any of the below CCFG overwrite settings are enabled.</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgCrcFields">
        <target>generic</target>
        <name>Comma separated list of CRC fields in CCFG that will be overwritten.
Valid field names are: ccfg.bootCfg.crc32,ccfg.crc32,ccfg.userRecord.crc32,ccfg.debugCfg.crc32</name>
        <valueType>String</valueType>
        <defaultValue>ccfg.bootCfg.crc32,ccfg.crc32,ccfg.userRecord.crc32,ccfg.debugCfg.crc32</defaultValue>
        <description>This setting will be used whenever CRC fields in CCFG will be overwritten. Please note that if any settings to overwrite a field in CCFG are enabled, then the CRC fields that are affected by these changes must be included in this list.</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgSkipProgrammingUserRecord">
        <target>generic</target>
        <name>Skip programming of CCFG user record (This is only applicable when programming main flash together with CCFG).
        </name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgVerifyUserRecordCrcToggle">
        <target>generic</target>
        <name>Verify the CCFG user record CRC32 field during flash programming. All other CRC fields are always verified.
        </name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <enableIf>
            <property id="CcfgSkipProgrammingUserRecord">0</property>
        </enableIf>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="ccfg.bootCfg.crc32Info">
        <target>generic</target>
        <name>ccfg.bootCfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>0:C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.crc32Info">
        <target>generic</target>
        <name>ccfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>10:73C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.userRecord.crc32Info">
        <target>generic</target>
        <name>ccfg.userRecord.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>750:7C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.debugCfg.crc32Info">
        <target>generic</target>
        <name>ccfg.debugCfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>7D0:2C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsToggle">
        <target>generic</target>
        <name>Overwrite Debug Authorization Configuration</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">
        <target>generic</target>
        <name>Debug Authorization Configuration</name>
        <valueType>StringList</valueType>
        <values>
            <value>Debug always allowed</value>
            <value>Require debug authentication</value>
            <value>Debug not allowed</value>
        </values>
        <defaultValue>Debug always allowed</defaultValue>
        <enableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">1</property>
        </enableIf>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsPasswordId">
        <target>generic</target>
        <name>Password ID</name>
        <valueType>String</valueType>
        <defaultValue>0101020305080D15</defaultValue>
        <!-- If we supply multiple conditions to enableIf they are OR'ed,
             so if we want to have the conditions AND'ed, we have to invert the conditions and use disableIf instead -->
        <disableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">0</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug always allowed</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug not allowed</property>
        </disableIf>
        <description>Hex-formatted password ID. 64-bit customer-defined password ID readable through SACI command (may be used by to calculate or look up debug password)</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsPasswordHash">
        <target>generic</target>
        <name>Password Hash</name>
        <valueType>String</valueType>
        <defaultValue>6DD7E436EBF431DF95AE15EE03BA8EE4C4C63FD8453F675E74D7C2012C9058E5</defaultValue>
        <!-- If we supply multiple conditions to enableIf they are OR'ed,
             so if we want to have the conditions AND'ed, we have to invert the conditions and use disableIf instead -->
        <disableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">0</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug always allowed</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug not allowed</property>
        </disableIf>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="SectorSize">
        <target>generic</target>
        <name>SectorSize</name>
        <valueType>String</valueType>
        <!-- size of flash sector in bytes in hex -->
        <defaultValue>800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgSize">
        <target>generic</target>
        <name>CcfgSize</name>
        <valueType>String</valueType>
        <!-- size of CCFG sector in bytes in hex -->
        <defaultValue>800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgUserRecordSize">
        <target>generic</target>
        <name>CcfgUserRecordSize</name>
        <valueType>String</valueType>
        <!-- size of CCFG User Record in bytes in hex -->
        <defaultValue>80</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgBase">
        <target>generic</target>
        <name>CcfgBase</name>
        <valueType>String</valueType>
        <!-- Base of CCFG sector in hex -->
        <defaultValue>4E020000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="PermissionsSettingText">
        <target>generic</target>
        <name>Note: To avoid the device being "Locked" a check of current "Permission" configuration (CCFG/SCFG) will be done when programming the device.
              The check will be enabled by default. Disabling the check should be done with caution to avoid not being able to do further programming and debugging of the device.
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>Permission check</category>
        </categories>
    </property>
    <property id="PermissionsSetting">
        <target>generic</target>
        <name>Check the permission configuration</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <categories>
            <category>Permission check</category>
        </categories>
    </property>
    <property id="CcfgPermissions">
        <target>generic</target>
        <name>CcfgPermissions</name>
        <valueType>String</valueType>
        <!-- Permission fields. Comma separated list of expected name:offset:value combinations
             The offset value must have a suffix to indicate Low (L) or High (H) nibble -->
        <defaultValue>allowFakeStby:0x18H:0xA,allowChipErase:0x19H:0xA</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ScfgOverwriteCrcsToggle">
        <target>generic</target>
        <name>Overwrite CRC field in SCFG. The CRC values will be based on the provided image.</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <description>Specify if the CRC field should be overwritten. This setting is automatically enabled.</description>
        <categories>
            <category>SCFG</category>
        </categories>
    </property>
    <property id="ScfgCrcFields">
        <target>generic</target>
        <name>Comma separated list of CRC fields in SCFG that will be overwritten.
Valid field names are: scfg.crc32</name>
        <valueType>String</valueType>
        <defaultValue>scfg.crc32</defaultValue>
        <description>This setting will be used whenever CRC fields in SCFG will be overwritten. Please note that if any settings to overwrite a field in SCFG are enabled, then the CRC fields that are affected by these changes must be included in this list.</description>
        <categories>
            <category>SCFG</category>
        </categories>
    </property>
    <property id="scfg.crc32Info">
        <target>generic</target>
        <name>scfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in scfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>0:3C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="scfg2.crc32Info">
        <target>generic</target>
        <name>scfg2.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in scfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>0:E4</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ScfgSize">
        <target>generic</target>
        <name>ScfgSize</name>
        <valueType>String</valueType>
        <!-- size of SCFG sector in bytes in hex -->
        <defaultValue>400</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ScfgBase">
        <target>generic</target>
        <name>ScfgBase</name>
        <valueType>String</valueType>
        <!-- Base of SCFG sector in hex -->
        <defaultValue>0x4E040000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ScfgPermissions">
        <target>generic</target>
        <name>ScfgPermissions</name>
        <valueType>String</valueType>
        <!-- Permission fields. Comma separated list of expected name:offset:value combinations
             The offset value must have a suffix to indicate Low (L) or High (H) nibble -->
        <defaultValue>allowFakeStby:0xD0H:0xA,allowChipErase:0xD1H:0xA</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="OtpSize">
        <target>generic</target>
        <name>OtpSize</name>
        <valueType>String</valueType>
        <!-- size of OTP sector in bytes in hex -->
        <defaultValue>800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="OtpBase">
        <target>generic</target>
        <name>OtpBase</name>
        <valueType>String</valueType>
        <!-- Base of OTP sector in hex -->
        <defaultValue>0x4E020800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <!-- MemoryRangeX used by Uniflash memory view -->
    <property id="MemoryRange0">
        <target>generic</target>
        <name>CCFG</name>
        <valueType>String</valueType>
        <defaultValue>0x4E020000-0x4E0207FF</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="MemoryRange1">
        <target>generic</target>
        <name>SCFG</name>
        <valueType>String</valueType>
        <defaultValue>0x4E040000-0x4E0403FF</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="MemoryRange2">
        <target>generic</target>
        <name>FCFG1</name>
        <valueType>String</valueType>
        <defaultValue>0x4E000000-0x4E0003FF</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <!-- fin -->
</PropertyList>
